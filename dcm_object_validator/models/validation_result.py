"""
ValidationResult data-model definition
"""

from typing import Optional
from dataclasses import dataclass, field

from dcm_common import Logger
from dcm_common.models import DataModel


@dataclass
class ValidationModuleResult(DataModel):
    """
    Result of a ValidatorModule

    Keyword arguments:
    valid -- validity with respect to module; `True` if valid
    log -- `Logger` content generated by module
    """

    valid: bool
    log: Logger


@dataclass
class ValidationResult(DataModel):
    """
    Validation result `DataModel`

    Keyword arguments:
    valid -- overall validity; `True` if valid
    details -- mapping of module-specific validation result; keys are
               given by validation module identifiers; values are `True`
               for a successful validation
    """

    valid: Optional[bool] = None
    details: dict[str, ValidationModuleResult] = field(default_factory=dict)

    def register_module(
        self, module: str, valid: bool, log: Logger
    ) -> None:
        """Add validation result to `ValidationResult`."""
        if self.details is None:
            self.details = {}
        self.details[module] = ValidationModuleResult(valid, log)

    def eval(self) -> None:
        """Evaluate results of registered modules."""

        if not self.details and self.valid is None:
            self.valid = None
            return
        self.valid = all(v.valid for v in (self.details or {}).values())
